// <auto-generated />
using System;
using AeroclubTimekeeper.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AeroclubTimekeeper.Storage.Migrations
{
    [DbContext(typeof(AeroclubDbContext))]
    [Migration("20251021101712_FillDatabase")]
    partial class FillDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("AeroclubTimekeeper.Storage.Entities.Aircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsServiceRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegistrationCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SeatsNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StallSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TopSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Aircrafts");

                    b.HasDiscriminator().HasValue("Aircraft");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AeroclubTimekeeper.Storage.Entities.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("AeroclubTimekeeper.Storage.Entities.CurrentWeather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AirportId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WindDirection")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WindSpeedKnots")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AirportId")
                        .IsUnique();

                    b.ToTable("CurrentWeathers");
                });

            modelBuilder.Entity("AeroclubTimekeeper.Storage.Entities.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AircraftId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndAirportId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FirstPilotId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlightStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasInstructorGroundSupervision")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LandingTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SecondPilotId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StartAirportId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("TakeOffTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.HasIndex("EndAirportId");

                    b.HasIndex("FirstPilotId");

                    b.HasIndex("SecondPilotId");

                    b.HasIndex("StartAirportId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("AeroclubTimekeeper.Storage.Entities.Pilot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasInsurance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasValidLicense")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasValidMedicalExamination")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsInstructor")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Pilots");
                });

            modelBuilder.Entity("AeroclubTimekeeper.Storage.Entities.Aeroplane", b =>
                {
                    b.HasBaseType("AeroclubTimekeeper.Storage.Entities.Aircraft");

                    b.Property<double>("EnginePower")
                        .HasColumnType("REAL");

                    b.HasDiscriminator().HasValue("Aeroplane");
                });

            modelBuilder.Entity("AeroclubTimekeeper.Storage.Entities.Glider", b =>
                {
                    b.HasBaseType("AeroclubTimekeeper.Storage.Entities.Aircraft");

                    b.Property<int>("LiftToDragRatio")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OptimalSpeed")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Glider");
                });

            modelBuilder.Entity("AeroclubTimekeeper.Storage.Entities.CurrentWeather", b =>
                {
                    b.HasOne("AeroclubTimekeeper.Storage.Entities.Airport", "Airport")
                        .WithOne("Weather")
                        .HasForeignKey("AeroclubTimekeeper.Storage.Entities.CurrentWeather", "AirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("AeroclubTimekeeper.Storage.Entities.Flight", b =>
                {
                    b.HasOne("AeroclubTimekeeper.Storage.Entities.Aircraft", "Aircraft")
                        .WithMany("Flights")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AeroclubTimekeeper.Storage.Entities.Airport", "EndAirport")
                        .WithMany()
                        .HasForeignKey("EndAirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AeroclubTimekeeper.Storage.Entities.Pilot", "FirstPilot")
                        .WithMany("FirstPilotFlights")
                        .HasForeignKey("FirstPilotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AeroclubTimekeeper.Storage.Entities.Pilot", "SecondPilot")
                        .WithMany("SecondPilotFlights")
                        .HasForeignKey("SecondPilotId");

                    b.HasOne("AeroclubTimekeeper.Storage.Entities.Airport", "StartAirport")
                        .WithMany()
                        .HasForeignKey("StartAirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("EndAirport");

                    b.Navigation("FirstPilot");

                    b.Navigation("SecondPilot");

                    b.Navigation("StartAirport");
                });

            modelBuilder.Entity("AeroclubTimekeeper.Storage.Entities.Aircraft", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("AeroclubTimekeeper.Storage.Entities.Airport", b =>
                {
                    b.Navigation("Weather");
                });

            modelBuilder.Entity("AeroclubTimekeeper.Storage.Entities.Pilot", b =>
                {
                    b.Navigation("FirstPilotFlights");

                    b.Navigation("SecondPilotFlights");
                });
#pragma warning restore 612, 618
        }
    }
}
